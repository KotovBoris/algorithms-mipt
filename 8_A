//  Найти кратчайшие расстояния между данной вершиной и остальными

#include <algorithm>
#include <iostream>
#include <queue>
#include <vector>

struct EdgeEnd {
  size_t end = 0;
  int weight = 0;
};

class Graph {
 public:
  explicit Graph(size_t size = 0) : adjacency_list_(size) {}

  void AddEdge(size_t start_vertex, size_t end_vertex, int weight) {
    adjacency_list_[start_vertex].push_back({end_vertex, weight});
    adjacency_list_[end_vertex].push_back({start_vertex, weight});
  }

  const std::vector<EdgeEnd>& GetAdjacent(size_t node) const {
    return adjacency_list_[node];
  }

  size_t Size() const { return adjacency_list_.size(); }

 private:
  std::vector<std::vector<EdgeEnd>> adjacency_list_;
};

std::istream& operator>>(std::istream& input_stream, Graph& graph) {
  size_t vertices;
  size_t edges;
  input_stream >> vertices >> edges;

  Graph temp_graph(vertices);
  for (size_t i = 0; i < edges; ++i) {
    size_t start_vertex;
    size_t end_vertex;
    int weight;
    input_stream >> start_vertex >> end_vertex >> weight;

    temp_graph.AddEdge(start_vertex, end_vertex, weight);
  }

  graph = temp_graph;
  return input_stream;
}

struct HeapNode {
  size_t distance;
  size_t node;

  bool operator<(const HeapNode& other) const {
    return distance > other.distance;
  }
};

std::vector<size_t> ShortestDistances(
    size_t start, const Graph& graph) {  //  Dijkstra's algorithm
  const size_t cInfinity = 2009000999;
  std::vector<size_t> distances(graph.Size(), cInfinity);

  std::priority_queue<HeapNode> heap;
  heap.push(HeapNode{0, start});

  while (!heap.empty()) {
    HeapNode top = heap.top();
    heap.pop();

    if (distances[top.node] != cInfinity) {
      continue;
    }

    distances[top.node] = top.distance;

    for (const EdgeEnd& neighbor : graph.GetAdjacent(top.node)) {
      heap.push(HeapNode{top.distance + neighbor.weight, neighbor.end});
    }
  }

  return distances;
}

int main() {
  size_t graph_number;
  std::cin >> graph_number;

  for (size_t i = 0; i < graph_number; ++i) {
    Graph graph;
    std::cin >> graph;

    size_t start;
    std::cin >> start;

    std::vector<size_t> distances = ShortestDistances(start, graph);

    for (auto element : distances) {
      std::cout << element << ' ';
    }

    std::cout << '\n';
  }
}
